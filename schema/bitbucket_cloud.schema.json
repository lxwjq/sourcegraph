{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "bitbucket_cloud.schema.json#",
  "title": "BitbucketCloudConnection",
  "description": "Configuration for a connection to Bitbucket Cloud.",
  "allowComments": true,
  "type": "object",
  "additionalProperties": false,
  "required": ["url", "username", "appPassword"],
  "properties": {
    "url": {
      "description": "URL of Bitbucket Cloud, such as https://bitbucket.org.",
      "type": "string",
      "not": {
        "type": "string",
        "pattern": "example\\.com"
      },
      "pattern": "^https?://",
      "format": "uri",
      "examples": ["https://bitbucket.org"]
    },
    "username": {
      "description": "The username to use when authenticating to the Bitbucket Cloud. Also set the corresponding \"appPassword\" field.",
      "type": "string"
    },
    "appPassword": {
      "description": "The app password to use when authenticating to the Bitbucket Cloud. Also set the corresponding \"username\" field.",
      "type": "string"
    },
    "gitURLType": {
      "description": "The type of Git URLs to use for cloning and fetching Git repositories on this Bitbucket Cloud.\n\nIf \"http\", Sourcegraph will access Bitbucket Cloud repositories using Git URLs of the form https://bitbucket.org/myteam/myproject.git.\n\nIf \"ssh\", Sourcegraph will access Bitbucket Cloud repositories using Git URLs of the form git@bitbucket.org:myteam/myproject.git. See the documentation for how to provide SSH private keys and known_hosts: https://docs.sourcegraph.com/admin/repo/auth#repositories-that-need-http-s-or-ssh-authentication.",
      "type": "string",
      "enum": ["http", "ssh"],
      "default": "http",
      "examples": ["ssh"]
    },
    "repositoryPathPattern": {
      "description": "The pattern used to generate the corresponding Sourcegraph repository name for a Bitbucket Cloud repository.\n\n - \"{host}\" is replaced with the Bitbucket Cloud URL's host (such as bitbucket.org),  and \"{nameWithOwner}\" is replaced with the GitHub repository's \"owner/path\" (such as \"myorg/myrepo\").\n\nFor example, if your Bitbucket Cloud is https://bitbucket.org and your Sourcegraph is https://src.example.com, then a repositoryPathPattern of \"{host}/{nameWithOwner}\" would mean that a Bitbucket Cloud repository at https://bitbucket.org/alice/my-repo is available on Sourcegraph at https://src.example.com/bitbucket.org/alice/my-repo.\n\nIt is important that the Sourcegraph repository name generated with this pattern be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.",
      "type": "string",
      "default": "{host}/{nameWithOwner}"
    },
    "excludePersonalRepositories": {
      "description": "Whether or not personal repositories should be excluded or not. When true, Sourcegraph will ignore personal repositories it may have access to. See https://docs.sourcegraph.com/integration/bitbucket_server#excluding-personal-repositories for more information.",
      "type": "boolean",
      "default": false
    },
    "repositoryQuery": {
      "description": "An array of strings specifying which repositories to mirror on Sourcegraph. Each string is a URL query string with parameters that filter the list of returned repos. Examples: \"?name=my-repo&projectname=PROJECT&visibility=private\".\n\nThe special string \"none\" can be used as the only element to disable this feature. Repositories matched by multiple query strings are only imported once. Here's the official Bitbucket Cloud documentation about which query string parameters are valid: https://developer.atlassian.com/bitbucket/api/2/reference/meta/filtering#query-repo",
      "type": "array",
      "items": {
        "type": "string",
        "minLength": 1
      },
      "default": ["none"],
      "minItems": 1,
      "examples": [["?name=my-repo&projectname=PROJECT&visibility=private"]]
    },
    "repos": {
      "description": "An array of repository \"projectKey/repositorySlug\" strings specifying repositories to mirror on Sourcegraph.",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "string",
        "pattern": "^[\\w-]+/[\\w.-]+$"
      },
      "examples": [["myproject/myrepo", "myproject/myotherrepo"]]
    },
    "teams": {
      "description": "An array of team names identifying Bitbucket Cloud teams whose repositories should be mirrored on Sourcegraph.",
      "type": "array",
      "items": { "type": "string", "pattern": "^[\\w-]+$" },
      "examples": [["name"], ["kubernetes", "golang", "facebook"]]
    },
    "exclude": {
      "description": "A list of repositories to never mirror from this Bitbucket Cloud. Takes precedence over \"repos\" and \"repositoryQuery\".\n\nSupports excluding by name ({\"name\": \"projectKey/repositorySlug\"}) or by ID ({\"id\": 42}).",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "title": "ExcludedBitbucketCloudRepo",
        "additionalProperties": false,
        "anyOf": [{ "required": ["name"] }, { "required": ["id"] }, { "required": ["pattern"] }],
        "properties": {
          "name": {
            "description": "The name of a Bitbucket Cloud repo (\"projectKey/repositorySlug\") to exclude from mirroring.",
            "type": "string",
            "pattern": "^[\\w-]+/[\\w.-]+$"
          },
          "id": {
            "description": "The ID of a Bitbucket Cloud repo (as returned by the Bitbucket Cloud's API) to exclude from mirroring.",
            "type": "integer"
          },
          "pattern": {
            "description": "Regular expression which matches against the name of a Bitbucket Cloud repo.",
            "type": "string",
            "format": "regex"
          }
        }
      },
      "examples": [
        [{ "name": "myproject/myrepo" }, { "id": 42 }],
        [{ "name": "myproject/myrepo" }, { "name": "myproject/myotherrepo" }, { "pattern": "^topsecretproject/.*" }]
      ]
    },
    "initialRepositoryEnablement": {
      "description": "Defines whether repositories from this Bitbucket Cloud should be enabled and cloned when they are first seen by Sourcegraph. If false, the site admin must explicitly enable Bitbucket Cloud repositories (in the site admin area) to clone them and make them searchable on Sourcegraph. If true, they will be enabled and cloned immediately (subject to rate limiting by Bitbucket Cloud); site admins can still disable them explicitly, and they'll remain disabled.",
      "type": "boolean",
      "default": false
    },
    "authorization": {
      "title": "BitbucketCloudAuthorization",
      "description": "If non-null, enforces Bitbucket Cloud repository permissions.",
      "type": "object",
      "properties": {
        "ttl": {
          "description": "The TTL of how long to cache permissions data. This is 3 hours by default.\n\nDecreasing the TTL will increase the load on the code host API. If you have X repos on your instance, it will take ~X/1000 API requests to fetch the complete list for 1 user.  If you have Y users, you will incur X*Y/1000 API requests per cache refresh period.\n\nIf set to zero, Sourcegraph will sync a user's entire accessible repository list on every request (NOT recommended).",
          "type": "string",
          "default": "3h"
        }
      }
    }
  }
}
